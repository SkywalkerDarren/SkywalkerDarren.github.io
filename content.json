[{"title":"git常用指令","date":"2017-02-11T04:58:18.000Z","path":"2017/02/11/git常用指令/","text":"git我用的时间不长，几年前注册的git，但是总是因为命令记不清楚，所以很少用git对我自己的代码进行托管。但git总归还是得要学的嘛，现在渐渐的我也开始习惯用git来管理自己的代码，不仅很方便而且相当于对自己的代码有个安全的备份，还能跟别人共享代码。 这篇文章我就记录一些我自己常用git命令和一些难记住但又很有用的命令吧。 以上这两张图就是git版本控制的大概框架了，根据这两张图就能加深理解git的工作流程和一些命令了 配置账户信息12345678git config -e [--global] # 编辑Git配置文件git config --global user.name yanhaijinggit config --global user.email yanhaijing@yeah.netgit config --list #查看配置的信息git help config #获取帮助信息 配置SSH密钥123ssh-keygen -t rsa -C yanhaijing@yeah.net #生成密钥ssh -T git@github.com #测试是否成功 创建仓库对当前所在目录进行的操作123456git init #初始化git status #获取状态git add [file1] [file2] ... #.或*代表全部添加 git add .git commit -m \"message\" #此处注意乱码git remote add origin git@github.com:xxxxxxxx/xxx.git #添加源git push -u origin master #push同时设置默认跟踪分支 从仓库克隆到本地1git clone git://github.com/xxxxxxxxx/xxx.git #克隆至当前所在目录 本地命令1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556git add . # 跟踪本地所有文件git add -u [path] # 添加[指定路径下]已跟踪文件rm *&amp;git rm * # 移除文件git rm -f * # 移除文件git rm --cached * # 停止追踪指定文件，但该文件会保留在工作区git mv file_from file_to # 重命名跟踪文件git log # 查看提交记录git commit # 提交更新 git commit [file1] [file2] ... # 提交指定文件 git commit -m 'message' #附带备注更新信息git commit -a # 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交git commit --amend #修改最后一次提交git commit -v # 提交时显示所有diff信息git reset HEAD * #取消已经暂存的文件git reset --mixed HEAD * #同上git reset --soft HEAD * #重置到指定状态，不会修改索引区和工作树git reset --hard HEAD * #重置到指定状态，会修改索引区和工作树git reset -- files #重置index区文件git revert HEAD #撤销前一次操作git revert HEAD~ #撤销前前一次操作git revert commit ## 撤销指定操作git checkout -- file #取消对文件的修改（从暂存区——覆盖worktree file）git checkout branch|tag|commit -- file_name #从仓库取出file覆盖当前分支git checkout -- . #从暂存区取出文件覆盖工作区git diff file #查看指定文件的差异git diff --stat #查看简单的diff结果git diff #比较Worktree和Index之间的差异git diff --cached #比较Index和HEAD之间的差异git diff HEAD #比较Worktree和HEAD之间的差异git diff branch #比较Worktree和branch之间的差异git diff branch1 branch2 #比较两次分支之间的差异git diff commit commit #比较两次提交之间的差异git log #查看最近的提交日志git log --pretty=oneline #单行显示提交日志git log --graph # 图形化显示git log --abbrev-commit # 显示log id的缩写git log -num #显示第几条log（倒数）git log --stat # 显示commit历史，以及每次commit发生变更的文件git log --follow [file] # 显示某个文件的版本历史，包括文件改名git log -p [file] # 显示指定文件相关的每一次diffgit stash #将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。git stash list #查看保存的工作现场git stash apply #恢复工作现场git stash drop #删除stash内容git stash pop #恢复的同时直接删除stash内容git stash apply stash@&#123;0&#125; #恢复指定的工作现场，当你保存了不只一份工作现场时。 分支操作123456789101112131415161718192021222324252627282930git branch #列出本地分支git branch -r #列出远端分支git branch -a #列出所有分支git branch -v #查看各个分支最后一个提交对象的信息git branch --merge #查看已经合并到当前分支的分支git branch --no-merge #查看为合并到当前分支的分支git branch test #新建test分支git branch branch [branch|commit|tag] # 从指定位置出新建分支git branch --track branch remote-branch # 新建一个分支，与指定的远程分支建立追踪关系git branch -m old new #重命名分支git branch -d test #删除test分支git branch -D test #强制删除test分支git branch --set-upstream dev origin/dev #将本地dev分支与远程dev分支之间建立链接git checkout test #切换到test分支git checkout -b test #新建+切换到test分支git checkout -b test dev #基于dev新建test分支，并切换git merge test #将test分支合并到当前分支git merge --squash test # 合并压缩，将test上的commit压缩为一条git cherry-pick commit #拣选合并，将commit合并到当前分支git cherry-pick -n commit #拣选多个提交，合并完后可以继续拣选下一个提交git rebase master #将master分之上超前的提交，变基到当前分支git rebase --onto master 169a6 #限制回滚范围，rebase当前分支从169a6以后的提交git rebase --interactive #交互模式 git rebase --continue # 处理完冲突继续合并 git rebase --skip # 跳过 git rebase --abort # 取消合并 远端操作123456789101112git fetch origin remotebranch[:localbranch] # 从远端拉去分支[到本地指定分支]git merge origin/branch #合并远端上指定分支git pull origin remotebranch:localbranch # 拉去远端分支到本地分支git push origin branch #将当前分支，推送到远端上指定分支git push origin localbranch:remotebranch #推送本地指定分支，到远端上指定分支git push origin :remotebranch # 删除远端指定分支git push origin remotebranch --delete # 删除远程分支git branch -dr branch # 删除本地和远程分支git checkout -b [--track] test origin/dev # 基于远端dev分支，新建本地test分支[同时设置跟踪] 源12345678910git remote add origin1 git@github.com:xxxxxxx/xxxxx.git #添加源git remote #显示全部源git remote -v #显示全部源+详细信息git remote rename origin1 origin2 #重命名git remote rm origin #删除git remote show origin #查看指定源的全部信息 标签123456789101112git tag#列出现有标签 git tag v0.1 [branch|commit] # [从指定位置]新建标签git tag -a v0.1 -m 'my version 1.4' #新建带注释标签git checkout tagname #切换到标签git push origin v1.5 #推送分支到源上git push origin --tags #一次性推送所有分支git tag -d v0.1 #删除标签git push origin :refs/tags/v0.1 #删除远程标签 日常指令123456git add .git commit -m 'message'git push origin branchgit clone git://github.com/xxxxxxxxx/xxx.gitgit pull origin remotebranch:localbranchgit checkout -- file","tags":[{"name":"git","slug":"git","permalink":"http://SkywalkerDarren.com/tags/git/"}]},{"title":"七牛云+极简图床作为Markdown图床","date":"2017-02-04T06:12:56.000Z","path":"2017/02/04/七牛云-极简图床作为Markdown图床/","text":"用七牛云存储和极简图床作为Markdown图床搭建完了博客写了一些教程，但一篇教程连图都没有是很难阅读的，而Markdown只允许我们从网上引用图片。有时候我们需要用自己的图片去上传而不是去网上寻找图片，那么为了在博客里面添加自己的图片，我们就需要一个合适的图床。 接下来我会给大家介绍怎么用七牛云和极简图床来上传自己的图片。 注册七牛云 首先在官网注册自己的账户，选择个人账户，按套路填上个人信息，激活邮件就好了。 在资源主页里面的对象存储点立即添加。 至此七牛云存储空间就算是完成创建了。 极简图床 极简图床应该是最简单的图床上传网站了。它不仅支持拖拽导入，还支持截图粘贴。而且上传完图片还能直接Markdown复制，非常的方便。 如果右上角注册并设置了七牛云存储空间，那么还可以将图片直接存入七牛云中管理。 空间名称自己取，AK和SK在个人面板的个人中心的密钥管理里面，照填即可。 最后的域名在七牛云侧边栏的对象存储里面就能找到。 最后保存完，你在极简上传的图片就会自动上传到你的七牛云空间了。","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://SkywalkerDarren.com/tags/Markdown/"},{"name":"七牛云","slug":"七牛云","permalink":"http://SkywalkerDarren.com/tags/七牛云/"},{"name":"极简","slug":"极简","permalink":"http://SkywalkerDarren.com/tags/极简/"},{"name":"图床","slug":"图床","permalink":"http://SkywalkerDarren.com/tags/图床/"}]},{"title":"githubpage+hexo搭建个人主页","date":"2017-02-03T09:10:16.000Z","path":"2017/02/03/githubub-page-hexo搭建个人博客/","text":"开头一些的唠叨之前一直想着建立一个属于自己的个人技术博客，由于接触的不多，也不知道什么hexo这些快速建博客的工具，只能选择放弃。 机缘巧合之下看到了一篇有关hexo建blog的文章，恰巧假期闲来无事也就捣鼓了这个博客，过程也不是很复杂，只要有些许的编程水平就可以搭建了。趁着刚刚建起博客时兴奋的余热，顺手写起了这篇教程，也给有建站兴趣的小伙伴们来一个参考吧。本文也尽量用简单的方式来演示建站的详细过程。当然，本博客也会随缘看心情放放一些其他的技术文档，见闻录，照片墙之类，有兴趣的小伙伴也可以关注下本博客。 PS：本人是使用Windows 10环境下建立的博客，有空的话我也会尝试用Mac建立博客，届时我也会再发布一篇针对Mac建站的教程（有生之年系列） 适合的人群 爱折腾的人 想写Blog 会用Markdown 了解Git 有一定编程基础 建站需要的准备 注册Github及安装Git 安装Node.js 安装hexo 注册Github首先再点这里注册Github账号，注册流程很简单网上教程也很多这里就不多讲了。 创建仓库登录账号后，点击这里建立你的仓库。 这里仓库的名字要与你的github名字一致，你的名字.github.io然后点Create repository即可。 下载Git点这里下载并安装Git Bash。 生成SSH密钥打开刚刚安装的Git Bash，键入1ssh-keygen -t rsa -C &quot;注册github时的邮箱&quot; 然后一路回车就可以了。待密钥生成完毕会在你的用户目录下的.ssh里面多出id_rsa，id_rsa.pub两个文件其中我的目录是：1C:\\Users\\Darren（你自己的电脑用户名）\\.ssh\\ 用记事本打开id_rsa.pub，全选然后复制到这里在这里点New SSH key，Title里面的随便填，把id_rsa.pub里面的东西全部复制到key里面，然后点Add SSH key即可。 安装Node.js点这里下载并安装Node.js，他有通用版和最新版，一般选通用版就可以了。 安装Hexo有能力的小伙伴可以通过官网和Hexo官方文档来查阅安装。接下来的操作都在git bash里面进行。在里面粘贴1npm install -g hexo 安装完后键入hexo出现下面这样就是成功了。 创建博客文件夹找到一个你想存放博客的地方，右键选Git Bash打开输入1hexo init 你博客的名字 1cd 你博客的名字 安装依赖包1npm install 本地查看生成静态页面1hexo g 先安装server1npm install hexo -server --save 启动本地预览1hexo s 此时在地址栏中输入http://localhost:4000/.就能看到你自己的博客了，但此时还是本地的。 Github创建博客先在github里面打开你刚建的那个仓库，点击setting。 在下面github page里面点choose a theme 记事本或sublime打开博客目录下的_config.yml编辑。只用改下列部分123456title: 博客标题subtitle: 副标题description: 描述author: 作者language: zh-CNtimezone: Asia/Hong_Kong 还有1url: http://你的用户名.com 在最后1234deploy: type: git repo: 仓库地址 branch: master 仓库地址可以在这里找到，复制粘贴过去。 Hexo部署12hexo ghexo d 这样就部署完成了，网页里打开你的用户名.github.io就是你的个人主页了。 常用Hexo命令常用命令12345678hexo help #查看帮助hexo init #初始化一个目录hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成网页，可以在 public 目录查看整个网站的文件hexo server #本地预览，&apos;Ctrl+C&apos;关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹** 简写1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 新建文章1hexo new 标题 这时候在你的博客目录下的source里面的_post文件夹内就会有你的标题.md博客了。 打开用markdown的语法进行编辑即可。编辑完成后123hexo g //生成静态页面hexo s //本地预览hexo d //上传部署 至此，你的博客就算是建立完成了。赶紧开始着手折腾属于你自己的小窝吧。","tags":[{"name":"github","slug":"github","permalink":"http://SkywalkerDarren.com/tags/github/"},{"name":"hexo","slug":"hexo","permalink":"http://SkywalkerDarren.com/tags/hexo/"},{"name":"个人主页","slug":"个人主页","permalink":"http://SkywalkerDarren.com/tags/个人主页/"},{"name":"个人博客","slug":"个人博客","permalink":"http://SkywalkerDarren.com/tags/个人博客/"}]},{"title":"Markdown学习手册","date":"2017-02-02T11:46:42.000Z","path":"2017/02/02/Markdown学习手册/","text":"Markdown学习手册一、 认识MarkdownMarkdown 是一种用来写作的轻量级「标记语言」，它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。它使我们专心于码字，用「标记」语法，来代替常见的排版格式。例如此文从内容到格式，甚至插图，键盘就可以通通搞定了。目前来看，支持 Markdown 语法的编辑器有很多，包括很多网站（例如简书）也支持了 Markdown 的文字录入。Markdown 从写作到完成，导出格式随心所欲，你可以导出 HTML 格式的文件用来网站发布，也可以十分方便的导出 PDF 格式，这种格式写出的简历更能得到 HR 的好感。甚至可以利用 CloudApp 这种云服务工具直接上传至网页用来分享你的文章，全球最大的轻博客平台 Tumblr，也支持 Mou 这类 Markdown 工具的直接上传。 Markdown官方文档 这里列出了Markdown的语法规则文档，在下文我也会用自己的方式来展示这些语法 “创始人 John Gruber 的 Markdown 语法说明” 中文版的Markdown语法手册 Markdown的优点 Markdown用的是纯文本的方式编辑兼容性极强 Markdown可以轻易的转成PDF，word，latex等各种格式 你可以专注于文字，而不是排版 其标记语言有很好的可读性 语法简单，上手简单易学二、Markdown的写作工具 在MAC OS X上有许多非常优秀的Markdown写作工具，如Mou、MacDown等，其中Mou是国人独立开发的Markdown编辑器，不仅支持实时预览，对中文支持很好，是最好的免费Markdown编辑器 在IOS端上有UIysses、Byword等，功能大同小异，界面不同，看个人喜好 在Android端上有MarkdownX左右滑切换预览编辑，很方便，也能支持git直接上传 Web端则力荐简书支持在线编辑与预览 Linux则有Haroopad、ReText等 Windows下比较推荐MarkdownPad 2，有免费版和专业版，一般来说免费版已足够使用，在win10中有Bug，需要安装Awesomium 1.6.6 SDK，本文也是基于Windows 10下来进行的 三、简要的语法规则标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加#号即可。# 一级标题一级标题## 二级标题二级标题### 三级标题三级标题以此类推，共有六级标题，注意#应该与题目之间有一个空格。 段落与换行在段落末端加上两个或以上的空格即可实现换行的功能，即（空格）（空格）（回车）就可以实现换行操作 强调有些时候我们需要对某些文本强调显示，常用的如：加粗，加斜，加粗加斜， 123**加粗***加斜****加粗加斜*** 列表在Markdown下，列表只需要在每个项目前面加上+或-即可生成无序列表，也可以使用1. 2. ...的方式生成有序列表，如： 无序列表：12+ 列表1+ 列表2 列表1 列表2 有序列表：121. 列表12. 列表2 列表1 列表2 区块引用区块引用可以允许你引用一段别处的句子 例如这样 其语法也特别简单，只需在你引用的例子前面加上&gt;即可，那么刚刚的例子就是这样：&gt; 例如这样多段落引用也是只用往每段前面加上&gt;即可，如12&gt; 第一段&gt; 第二段 第一段第二段 在引用中你可以嵌套引用，也可以继续使用其他Markdown语法12345&gt;第一层引用&gt; &gt; 第二层引用&gt; &gt; **加粗**&gt; # 标题 则生成 第一层引用 第二层引用 加粗 标题 分割线分割线可以实现文章的分割，其实现方法也很简单，另起一行键入三个以上的-或*就可以实现，行内不能有其他东西，比如---就会产生如下分割线 超链接超链接可以让你的某一文本链接到其他的地方例如：百度其用法是：[名称](http://www.example.com) 表格Markdown原生不支持表格生成，而一般扩展的Markdown是可以生成表格的。生成表格的方式略微复杂，比如说我要生成如下表格 Table Are Cool Col1 centered 1$ left centered right 那么需要如下代码：1234| Table | Are | Cool || ------|:--------:| -----:|| Col1 | centered | 1$ || left | centered | right | 代码如果你是一个程序猿，那么你就需要代码框来框住你的代码首先是单行的代码，它可以出现在任意的地方像printf()这样，也可以是一大段的代码框1234567#include&lt;stdio.h&gt;int main ()&#123; printf(\"HelloWorld\\n\"); return 0;&#125; 单行的代码生成只用在所需要的代码两边加上反引号(`)（实际不包括括号）大段代码则需要3个反引号来开启与结束，在开头的3个反引号后面加上代码的语言还可以开启语法高亮123456789\\```C#include&lt;stdio.h&gt;int main ()&#123; printf(&quot;HelloWorld\\n&quot;); return 0;&#125; ```\\ （实际不包括反斜杠） 图片插入这应该是最麻烦的一个，插入图片需要一个图床，你可以使用极简图床，七牛云也可以使用新浪微博的相册或者直接使用网上图片的地址。从方便易用来说我推荐极简图床，只需要将本地图片拖拽上传立马就能得到图片地址，还支持Markdown格式直接复制。当然，我也会在下一篇文章里在介绍如何使用七牛云作为图床进行图片的上传，这里只演示如何进行图片的插入。插入图片代码为![img](http://p4.music.126.net/8qad1t-kjQjhQg8YnB7-Ig==/18528969953049269.jpg)与超链接的差别只是前面多了个!12[超链接](http://www.example.com) //超链接![img](http://www.example.com/xxx/xxx.jpg) //图片 （中括号内的内容可以省略）","tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://SkywalkerDarren.com/tags/Markdown/"},{"name":"学习","slug":"学习","permalink":"http://SkywalkerDarren.com/tags/学习/"}]},{"title":"Hello world","date":"2017-02-02T04:15:09.000Z","path":"2017/02/02/hello-world/","text":"我的第一篇博客","tags":[]}]